// Generated by diesel_ext
#![allow(unused)]
#![allow(non_snake_case)]

use diesel::prelude::*;
use crate::schema::*;

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(UUID))]
#[diesel(table_name = archivedSponsorTimes)]
pub struct ArchivedSponsorTime {
    pub videoID: String,
    pub startTime: f32,
    pub endTime: f32,
    pub votes: i32,
    pub locked: i32,
    pub incorrectVotes: i32,
    pub UUID: String,
    pub userID: String,
    pub timeSubmitted: i32,
    pub views: i32,
    pub category: String,
    pub actionType: String,
    pub service: String,
    pub videoDuration: i32,
    pub hidden: i32,
    pub reputation: i32,
    pub shadowHidden: i32,
    pub hashedVideoID: String,
    pub userAgent: String,
    pub description: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(table_name = categoryVotes)]
pub struct CategoryVote {
    pub UUID: String,
    pub category: String,
    pub votes: i32,
    pub id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(key))]
#[diesel(table_name = config)]
pub struct Config {
    pub key: String,
    pub value: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(table_name = lockCategories)]
pub struct LockCategory {
    pub videoID: String,
    pub userID: String,
    pub actionType: String,
    pub category: String,
    pub hashedVideoID: String,
    pub reason: String,
    pub service: String,
    pub id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(table_name = ratings)]
pub struct Rating {
    pub videoID: String,
    pub service: String,
    pub type_: i32,
    pub count: i32,
    pub hashedVideoID: String,
    pub id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(hashedIP))]
#[diesel(table_name = shadowBannedIPs)]
pub struct ShadowBannedIP {
    pub hashedIP: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(userID))]
#[diesel(table_name = shadowBannedUsers)]
pub struct ShadowBannedUser {
    pub userID: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(UUID))]
#[diesel(table_name = sponsorTimes)]
pub struct SponsorTime {
    pub videoID: String,
    pub startTime: f32,
    pub endTime: f32,
    pub votes: i32,
    pub locked: i32,
    pub incorrectVotes: i32,
    pub UUID: String,
    pub userID: String,
    pub timeSubmitted: i32,
    pub views: i32,
    pub category: String,
    pub actionType: String,
    pub service: String,
    pub videoDuration: i32,
    pub hidden: i32,
    pub reputation: i32,
    pub shadowHidden: i32,
    pub hashedVideoID: String,
    pub userAgent: String,
    pub description: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(UUID))]
#[diesel(table_name = thumbnailTimestamps)]
pub struct ThumbnailTimestamp {
    pub UUID: String,
    pub timestamp: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(UUID))]
#[diesel(table_name = thumbnailVotes)]
pub struct ThumbnailVote {
    pub UUID: String,
    pub votes: Option<i32>,
    pub locked: Option<i32>,
    pub shadowHidden: Option<i32>,
    pub downvotes: Option<i32>,
    pub removed: Option<i32>,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(UUID))]
#[diesel(table_name = thumbnails)]
pub struct Thumbnail {
    pub original: Option<i32>,
    pub userID: String,
    pub service: String,
    pub hashedVideoID: String,
    pub timeSubmitted: i32,
    pub UUID: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(UUID))]
#[diesel(table_name = titleVotes)]
pub struct TitleVote {
    pub UUID: String,
    pub votes: i32,
    pub locked: i32,
    pub shadowHidden: i32,
    pub verification: Option<i32>,
    pub downvotes: i32,
    pub removed: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(UUID))]
#[diesel(table_name = titles)]
pub struct Title {
    pub videoID: String,
    pub title: String,
    pub original: Option<i32>,
    pub userID: String,
    pub service: String,
    pub hashedVideoID: String,
    pub timeSubmitted: i32,
    pub UUID: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(table_name = unlistedVideos)]
pub struct UnlistedVideo {
    pub videoID: String,
    pub year: i32,
    pub views: i32,
    pub channelID: String,
    pub timeSubmitted: i32,
    pub service: String,
    pub id: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(userID, feature))]
#[diesel(table_name = userFeatures)]
pub struct UserFeature {
    pub userID: String,
    pub feature: i32,
    pub issuerUserID: String,
    pub timeSubmitted: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(userID))]
#[diesel(table_name = userNames)]
pub struct UserName {
    pub userID: String,
    pub userName: String,
    pub locked: i32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(videoID))]
#[diesel(table_name = videoInfo)]
pub struct VideoInfo {
    pub videoID: String,
    pub channelID: String,
    pub title: String,
    pub published: f32,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(userID))]
#[diesel(table_name = vipUsers)]
pub struct VipUser {
    pub userID: String,
}

#[derive(Queryable, Debug, Identifiable)]
#[diesel(primary_key(userID, issueTime))]
#[diesel(table_name = warnings)]
pub struct Warning {
    pub userID: String,
    pub issueTime: i32,
    pub issuerUserID: String,
    pub enabled: i32,
    pub reason: String,
    pub type_: Option<i32>,
}

